<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Runs kubernetes conformance tests</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>100</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>UNDEFINED</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.14.2">
      <projectUrl>https://github.com/samsung-ag/kraken/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>KRAKEN_REPO</name>
          <description></description>
          <defaultValue>git@github.com:samsung-ag/kraken</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KRAKEN_BRANCH</name>
          <description></description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KUBE_CONFORMANCE_BRANCH</name>
          <description>Kubernetes conformance tests branch.  Recommended possible values:
- conformance-test-v1
- release-1.0
- release-1.1
- master</description>
          <defaultValue>release-1.1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KRAKEN_CLUSTER_NAME</name>
          <description>Used by kraken to name a few cluster resources: AWS resources, context name, DNS records, etc.</description>
          <defaultValue>kubernetes_conformance</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>REBUILD_TESTS</name>
          <description>Set this to false to disable test rebuilds.  NB: the rest of the job assumes the correct tests have been built, setting this to false may result in unpredictable behavior</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DESTROY_CLUSTER</name>
          <description>Set this to false to leave the cluster around after the job finishes.  Re-use the cluster next time by using the same KRAKEN_CLUSTER_NAME</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <jenkins.plugins.slack.SlackNotifier_-SlackJobProperty plugin="slack@1.8.1">
      <teamDomain></teamDomain>
      <token></token>
      <room></room>
      <startNotification>true</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>true</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <showCommitList>false</showCommitList>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier_-SlackJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>${KRAKEN_REPO}</url>
        <credentialsId>jenkins-github</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${KRAKEN_BRANCH}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.14.2">
      <spec></spec>
    </com.cloudbees.jenkins.GitHubPushTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.0">
        <token>${REBUILD_TESTS}</token>
      </condition>
      <buildStep class="hudson.plugins.parameterizedtrigger.TriggerBuilder" plugin="parameterized-trigger@2.30">
        <configs>
          <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
            <configs>
              <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
                <properties>KUBE_TESTS_BRANCH=${KUBE_CONFORMANCE_BRANCH}
KUBE_TESTS_REPO=https://github.com/kubernetes/kubernetes.git
KUBE_TESTS_DIR=kubernetes_conformance
</properties>
              </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
            </configs>
            <projects>kubernetes_build_tests</projects>
            <condition>ALWAYS</condition>
            <triggerWithNoParameters>false</triggerWithNoParameters>
            <block>
              <buildStepFailureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </buildStepFailureThreshold>
              <unstableThreshold>
                <name>UNSTABLE</name>
                <ordinal>1</ordinal>
                <color>YELLOW</color>
                <completeBuild>true</completeBuild>
              </unstableThreshold>
              <failureThreshold>
                <name>FAILURE</name>
                <ordinal>2</ordinal>
                <color>RED</color>
                <completeBuild>true</completeBuild>
              </failureThreshold>
            </block>
            <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
          </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
        </configs>
      </buildStep>
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
    </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
    <hudson.tasks.Shell>
      <command>KUBECONFIG=${WORKSPACE}/kubeconfig

# set required terraform variables to parsed out AWS creds and run terraform
cat &gt; terraform/aws/terraform.tfvars &lt;&lt; EOF
cluster_name = &quot;${KRAKEN_CLUSTER_NAME}_aws&quot;
aws_user_prefix = &quot;${KRAKEN_CLUSTER_NAME}&quot;
aws_access_key = &quot;${AWS_ACCESS_KEY_ID}&quot;
aws_secret_key = &quot;${AWS_SECRET_ACCESS_KEY}&quot;
kubeconfig = &quot;${KUBECONFIG}&quot;
asg_wait_single = 60
asg_wait_total = 10
node_type = &quot;m3.medium&quot;
EOF

# start terraform
hack/terraform-remote.sh aws ${KRAKEN_CLUSTER_NAME} apply -no-color

# clear output folder
rm -rf ${WORKSPACE}/output
mkdir -p ${WORKSPACE}/output</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

export KRAKEN_COMMIT=${GIT_COMMIT}
export KUBE_ROOT=/var/lib/docker/gobuild/kubernetes_conformance
export KUBE_CONFORMANCE_KUBECONFIG=${WORKSPACE}/kubeconfig
export KUBE_CONFORMANCE_OUTPUT_DIR=${WORKSPACE}/output/conformance

KUBE_CONFORMANCE_LOG=${WORKSPACE}/kraken_${KRAKEN_COMMIT}_conformance.log
# TODO: unclear what part of k8s scripts require USER to be set
USER=jenkins ./hack/conformance.sh ${KUBE_CONFORMANCE_BRANCH} | tee ${KUBE_CONFORMANCE_LOG}
# tee isn&apos;t exiting &gt;0 as expected, so use the exit status of the script directly
exit ${PIPESTATUS[0]}</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

export KRAKEN_COMMIT=${GIT_COMMIT}
export KUBE_ROOT=/var/lib/docker/gobuild/kubernetes_conformance
export KUBE_DENSITY_KUBECONFIG=${WORKSPACE}/kubeconfig
export KUBE_DENSITY_NUM_NODES=4
export KUBE_DENSITY_OUTPUT_DIR=${WORKSPACE}/output/density
KUBE_DENSITY_LOG=${WORKSPACE}/kraken_${KRAKEN_COMMIT}_density.log
# TODO: unclear what part of k8s scripts require USER to be set
USER=jenkins ./hack/density.sh ${KUBE_CONFORMANCE_BRANCH} 30 | tee ${KUBE_DENSITY_LOG}
# tee isn&apos;t exiting &gt;0 as expected, so use the exit status of the script directly
exit ${PIPESTATUS[0]}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>output/**/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.10">
      <testResults>output/**/junit*.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <healthScaleFactor>1.0</healthScaleFactor>
      <allowEmptyResults>false</allowEmptyResults>
    </hudson.tasks.junit.JUnitResultArchiver>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
      <buildSteps>
        <org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder plugin="conditional-buildstep@1.3.3">
          <condition class="org.jenkins_ci.plugins.run_condition.core.BooleanCondition" plugin="run-condition@1.0">
            <token>${DESTROY_CLUSTER}</token>
          </condition>
          <buildStep class="hudson.tasks.Shell">
            <command>KUBECONFIG=${WORKSPACE}/kubeconfig

set +e
# copy the log file to S3
aws s3 cp --acl public-read --content-type text/plain --metadata-directive REPLACE ${WORKSPACE}/output/conformance/kraken_${GIT_COMMIT}_conformance.log s3://kraken-e2e-logs/conformance/
aws s3 cp --acl public-read --content-type text/plain --metadata-directive REPLACE ${WORKSPACE}/output/density/kraken_${GIT_COMMIT}_density.log s3://kraken-e2e-logs/conformance/
set -e

retries=10
until hack/terraform-remote.sh aws ${KRAKEN_CLUSTER_NAME} destroy -no-color
do
if [ $retries -eq 0 ]; then
echo &quot;Destroy failed ...&quot;
exit 1
fi

retries=$((retries - 1))
echo &quot;Retrying destroy ...&quot;
sleep 30
done</command>
          </buildStep>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
        </org.jenkinsci.plugins.conditionalbuildstep.singlestep.SingleConditionalBuilder>
      </buildSteps>
      <scriptOnlyIfSuccess>false</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
      <markBuildUnstable>false</markBuildUnstable>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.plugins.parameterizedtrigger.BuildTrigger plugin="parameterized-trigger@2.30">
      <configs>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>KRAKEN_COMMIT=${GIT_COMMIT}
TEST_RESULT=Test run succeeded</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>update-gh-pages</projects>
          <condition>SUCCESS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
        <hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>KRAKEN_COMMIT=${GIT_COMMIT}
TEST_RESULT=Test run failed</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>update-gh-pages</projects>
          <condition>UNSTABLE_OR_WORSE</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
        </hudson.plugins.parameterizedtrigger.BuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.BuildTrigger>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@1.8.1">
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper/>
  </buildWrappers>
</project>
