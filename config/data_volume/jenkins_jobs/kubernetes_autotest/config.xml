<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Runs kubernetes conformance tests</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>100</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.6">
      <useBuildBlocker>false</useBuildBlocker>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.12.0">
      <projectUrl>https://github.com/Samsung-AG/kraken/</projectUrl>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>CREATE_CLUSTER</name>
          <description>create cluster at the start of the job</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_ANSIBLE</name>
          <description>whether to run ansible prior to running tests</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ANSIBLE_FORKS</name>
          <description>number of forks to use when running ansible-playbook</description>
          <defaultValue>25</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_TESTS</name>
          <description>whether to run the tests</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DESTROY_CLUSTER</name>
          <description>Destroy cluster at the end of the job</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KUBERNETES_BINARIES_URI</name>
          <description>Link to kubernetes binaries. Suggested values:
- https://storage.googleapis.com/kubernetes-release/release/v1.0.7/bin/linux/amd64 for 1.0.x
- https://storage.googleapis.com/kubernetes-release/release/v1.1.2/bin/linux/amd64 for 1.1.x
</description>
          <defaultValue>https://storage.googleapis.com/kubernetes-release/release/v1.1.2/bin/linux/amd64</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NUMBER_OF_NODES</name>
          <description>Number of kubernetes nodes</description>
          <defaultValue>10</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NODE_TYPE</name>
          <description>autoscaled node aws type</description>
          <defaultValue>m3.medium</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>API_SERVER_COUNT</name>
          <description>size of api server pool</description>
          <defaultValue>1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>API_SERVER_TYPE</name>
          <description>api server aws type</description>
          <defaultValue>m4.4xlarge</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ETCD_TYPE</name>
          <description>etcd aws type</description>
          <defaultValue>m4.2xlarge</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MASTER_TYPE</name>
          <description>master aws type</description>
          <defaultValue>m4.4xlarge</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TOTAL_WAIT</name>
          <description>total number of 60 second waits</description>
          <defaultValue>10</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KUBE_TESTS_BRANCH</name>
          <description>branch from which to build/run tests; suggested values:
- conformance-test-v1
- release-1.0
- release-1.1
- master</description>
          <defaultValue>release-1.1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KUBE_TESTS_DIR</name>
          <description>where to clone test repo to under /var/lib/docker/gobuild/KUBE_TESTS_DIR</description>
          <defaultValue>kubernetes</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>KRAKEN_CLUSTER_NAME</name>
          <description>Used by kraken to name a few cluster resources: AWS resources, context name, DNS records, etc.</description>
          <defaultValue>pipeletconformance</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DENSITIES</name>
          <description>space separated list of density test cases to run</description>
          <defaultValue>3 15 30</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <jenkins.plugins.slack.SlackNotifier_-SlackJobProperty plugin="slack@1.8">
      <teamDomain></teamDomain>
      <token></token>
      <room></room>
      <startNotification>true</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>true</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>false</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <showCommitList>false</showCommitList>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier_-SlackJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git@github.com:samsung-ag/kraken</url>
        <credentialsId>jenkins-github</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># TODO: use a shared 'clusters' directory instead
KUBECONFIG=/var/lib/docker/gobuild/${KUBE_TESTS_DIR}/kubeconfig

# create the cluster
if [ &quot;$CREATE_CLUSTER&quot; = true ]; then
  # set required terraform variables to parsed out AWS creds and run terraform
  export TF_VAR_cluster_name=${KRAKEN_CLUSTER_NAME}_aws
  export TF_VAR_aws_user_prefix=${KRAKEN_CLUSTER_NAME}
  export TF_VAR_aws_access_key=${AWS_KEY_ID}
  export TF_VAR_aws_secret_key=${AWS_ACCESS_KEY}
  export TF_VAR_kubeconfig=${KUBECONFIG}

  export TF_VAR_asg_wait_single=60
  export TF_VAR_asg_wait_total=${TOTAL_WAIT}

  # autotest cluster values
  export TF_VAR_node_count=$((NUMBER_OF_NODES-1))
  export TF_VAR_kubernetes_binaries_uri=${KUBERNETES_BINARIES_URI}
  export TF_VAR_aws_node_type=${NODE_TYPE}
  export TF_VAR_aws_etcd_type=${ETCD_TYPE}
  export TF_VAR_aws_storage_type_etcd=ephemeral
  export TF_VAR_aws_master_type=${MASTER_TYPE}
  export TF_VAR_aws_apiserver_type=${API_SERVER_TYPE}
  export TF_VAR_apiserver_count=${API_SERVER_COUNT}

  # start terraform
  terraform apply -no-color -input=false -state=${WORKSPACE}/terraform/aws/terraform.tfstate ${WORKSPACE}/terraform/aws
fi;

if [ &quot;$RUN_ANSIBLE&quot; = true ]; then
  retries=10
    until ANSIBLE_SSH_PIPELINING=True ANSIBLE_SSH_RETRIES=100 ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -f ${ANSIBLE_FORKS} -i ${WORKSPACE}/terraform/aws/rendered/ansible.inventory ${WORKSPACE}/ansible/iaas_provision_local.yaml  --extra-vars &quot;kubernetes_binaries_uri=${KUBERNETES_BINARIES_URI}&quot; -v --diff
    do
      if [ $retries -eq 0 ]; then
        echo &quot;Re ansible failed ...&quot;
        exit 1
      fi

      retries=$((retries - 1))
      echo &quot;Retrying ansible ...&quot;
      sleep 10
    done
fi</command>
    </hudson.tasks.Shell>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.27">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
              <properties>KUBE_TESTS_BRANCH=${KUBE_TESTS_BRANCH}
KUBE_TESTS_REPO=https://github.com/kubernetes/kubernetes.git
KUBE_TESTS_DIR=${KUBE_TESTS_DIR}
KRAKEN_CLUSTER_NAME=${KRAKEN_CLUSTER_NAME}
</properties>
            </hudson.plugins.parameterizedtrigger.PredefinedBuildParameters>
          </configs>
          <projects>kubernetes_build_tests</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <block>
            <buildStepFailureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </buildStepFailureThreshold>
            <unstableThreshold>
              <name>UNSTABLE</name>
              <ordinal>1</ordinal>
              <color>YELLOW</color>
              <completeBuild>true</completeBuild>
            </unstableThreshold>
            <failureThreshold>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </failureThreshold>
          </block>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
    <hudson.tasks.Shell>
      <command>

# run
if [ &quot;$RUN_TESTS&quot; = true ]; then

  export KUBE_ROOT=/var/lib/docker/gobuild/${KUBE_TESTS_DIR}
  export KUBE_DENSITY_KUBECONFIG=${KUBE_ROOT}/kubeconfig
  export KUBE_DENSITY_NUM_NODES=4

  fail_step=false
  pod_densities=&quot;${DENSITIES%\&quot;}&quot;
  pod_densities=&quot;${pod_densities#\&quot;}&quot;

  set +e

  rm -rf ${WORKSPACE}/output

  for i in $pod_densities; do
    KUBECONFIG=${KUBE_DENSITY_KUBECONFIG} ${WORKSPACE}/hack/terminate-namespace.sh density
    export KUBE_DENSITY_OUTPUT_DIR=${WORKSPACE}/output/density-$i
    KUBE_DENSITY_LOG=${KUBE_DENSITY_OUTPUT_DIR}/kubernetes_autotest_$i.log
    # TODO: unclear what part of k8s scripts require USER to be set
    # TODO: should we just drop test build functionality
    REBUILD_TESTS=false USER=jenkins hack/density.sh ${KUBE_TESTS_BRANCH} $i | tee ${KUBE_DENSITY_LOG}

    if [ $? -ne 0 ]; then
        fail_step=true
    fi

    ${WORKSPACE}/hack/namespace_cleanup.sh --etcd etcd --config ~/.ssh/config_${KRAKEN_CLUSTER_NAME}_aws
  done

  set -e

  if [ &quot;$fail_step&quot; = true ] ; then
      exit 1
  fi

fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>output/**/*</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
      <buildSteps>
        <hudson.tasks.Shell>
          <command># TODO: use a shared 'clusters' directory instead
KUBECONFIG=/var/lib/docker/gobuild/${KUBE_TESTS_DIR}/kubeconfig

# destroy the cluster
if [ &quot;$DESTROY_CLUSTER&quot; = true ]; then
  export TF_VAR_cluster_name=${KRAKEN_CLUSTER_NAME}_aws
  export TF_VAR_aws_user_prefix=${KRAKEN_CLUSTER_NAME}
  export TF_VAR_aws_access_key=${AWS_KEY_ID}
  export TF_VAR_aws_secret_key=${AWS_ACCESS_KEY}
  export TF_VAR_aws_kubeconfig=${KUBECONFIG}

  retries=10
  until terraform destroy -no-color -input=false -force -state=${WORKSPACE}/terraform/aws/terraform.tfstate ${WORKSPACE}/terraform/aws
  do
    if [ $retries -eq 0 ]; then
      echo &quot;Destroy failed ...&quot;
      exit 1
    fi

    retries=$((retries - 1))
    echo &quot;Retrying destroy ...&quot;
    sleep 10
  done
fi</command>
        </hudson.tasks.Shell>
      </buildSteps>
      <scriptOnlyIfSuccess>false</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
      <markBuildUnstable>false</markBuildUnstable>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@1.8">
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.26">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <com.michelin.cio.hudson.plugins.maskpasswords.MaskPasswordsBuildWrapper/>
  </buildWrappers>
</project>
